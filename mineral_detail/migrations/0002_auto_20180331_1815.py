# Generated by Django 2.0.3 on 2018-03-31 18:15
import json
import os

from django.db import migrations


def read_json(apps, schema_editor):
    parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
    json_file = parent_dir + "/minerals.json"

    data = json.load(open(json_file))

    Mineral = apps.get_model('mineral_detail', 'Mineral')
    Group = apps.get_model('mineral_detail', 'Group')
    Category = apps.get_model('mineral_detail', 'Category')

    for d in data:
        try:
            get_category = Category.objects.get(name=d['category'])
        except Category.DoesNotExist:
            get_category = Category.objects.create(name=d['category'])
            get_category.save()

        try:
            get_group = Group.objects.get(name=d['group'])
        except Group.DoesNotExist:
            get_group = Group.objects.create(name=d['group'])
            get_group.save()

        new_mineral = Mineral(
            name=d['name'],
            image_filename=d['image filename'],
            image_caption=d['image caption'],
            category=get_category,
            group=get_group,
        )

        if 'formula' in d:
            new_mineral.formula = d['formula']
        if 'strunz classification' in d:
            new_mineral.strunz = d['strunz classification']
        if 'crystal system' in d:
            new_mineral.crystal_system = d['crystal system']
        if 'unit cell' in d:
            new_mineral.unit_cell = d['unit cell']
        if 'color' in d:
            new_mineral.color = d['color']
        if 'crystal symmetry' in d:
            new_mineral.crystal_symmetry = d['crystal symmetry']
        if 'cleavage' in d:
            new_mineral.color = d['cleavage']
        if 'mohs scale hardness' in d:
            new_mineral.mohs_scale = d['mohs scale hardness']
        if 'luster' in d:
            new_mineral.luster = d['luster']
        if 'streak' in d:
            new_mineral.streak = d['streak']
        if 'diaphaneity' in d:
            new_mineral.diaphaneity = d['diaphaneity']
        if 'optical_prop' in d:
            new_mineral.optical_prop = d['optical properties']

        # import pdb; pdb.set_trace()
        new_mineral.save()


class Migration(migrations.Migration):

    dependencies = [
        ('mineral_detail', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(read_json),
    ]
